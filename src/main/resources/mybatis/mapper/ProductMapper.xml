<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.onnury.mapper.ProductMapper">

    <!-- 일반 유저 신 제품들 조회 -->
    <select id="getNewProductsByCustomer" resultType="com.onnury.product.domain.Product">
        <!-- getNewProductsByCustomer -->
        select
        *
        from product
        <where>
            expression_check = 'Y' and sell_classification = 'C' and status = 'Y'
        </where>
        order by created_at desc
        limit 8;
    </select>

    <!-- 기업 및 관리자 신 제품들 조회 -->
    <select id="getNewProductsByBusiness" resultType="com.onnury.product.domain.Product">
        <!-- getNewProductsByBusiness -->
        select
        *
        from product
        <where>
            expression_check = 'Y' and status = 'Y'
        </where>
        order by created_at desc
        limit 8;
    </select>

    <!-- 신 상품 정보 조회 -->
    <select id="getProductInfo" parameterType="String" resultType="com.onnury.product.response.NewReleaseProductInfo">
        <!-- getProductInfo -->
        select
        p.*,
        pdi.content
        from
        (select
        a.*,
        b.brand_title
        from
        (select
        p.product_id, p.product_name, p.category_in_brand_id, c.brand_id,
        c.category1id, (select category_name from category where category_id = c.category1id) as up_category_name,
        c.category2id, (select category_name from category where category_id = c.category2id) as middle_category_name,
        c.category3id, (select category_name from category where category_id = c.category3id) as down_category_name,
        p.supplier_id, p.classification_code, p.model_number, p.delivery_type, p.sell_classification,
        p.expression_check, p.sell_price, p.normal_price, p.delivery_price, p.purchase_price,
        p.event_start_date, p.event_end_date, p.event_price, p.event_description, p.option_check,
        p.manufacturer, p.made_in_origin, p.consignment_store, p.memo, p.status, p.relate_img_ids
        from
        product p
        inner join
        category_in_brand c
        on
        p.category_in_brand_id = c.category_in_brand_id
        where
        p.expression_check = 'Y' and p.status = 'Y'
        <if test='loginMemberType != null and couponNum != ""'>
            and p.sell_classification = #{loginMemberType}
        </if>
        order by
        p.created_at desc
        limit 8) a
        inner join
        brand b
        on
        a.brand_id = b.brand_id) p
        inner join
        product_detail_info pdi
        on
        p.product_id = pdi.product_id;
    </select>

    <!-- 신 상품 옵션 정보 리스트 -->
    <select id="getNewReleaseProductOptionList" parameterType="Long"
            resultType="com.onnury.product.response.NewReleaseProductOptionDto">
        <!-- getProductOptionList -->
        select
        p.product_option_id, p.option_title, p.necessary_check
        from
        product_option p
        inner join
        (select product_option_id from product_of_option where product_id = #{productId}) pop
        on
        p.product_option_id = pop.product_option_id;
    </select>

    <!-- 신 상품의 각 옵션에 해당되는 상세 옵션 정보 리스트 -->
    <select id="getNewReleaseProductDetailOptionList" parameterType="Long"
            resultType="com.onnury.product.response.NewReleaseProductDetailOptionDto">
        <!-- getNewReleaseProductDetailOptionList -->
        select
        b.product_detail_option_id, b.detail_option_name, b.option_price
        from
        (select
        p.product_option_id, p.option_title, p.necessary_check
        from
        product_option p
        inner join
        (select product_option_id from product_of_option where product_option_id = #{productOptionId}) pop
        on
        p.product_option_id = pop.product_option_id) a
        inner join
        product_detail_option b
        on
        a.product_option_id = b.product_option_id;
    </select>

    <!-- 선택한 대분류 카테고리 + 검색 조건이 적용된 제품 정보 리스트 조회 -->
    <select id="getSelectUpCategoryAndConditionRelateProductList" parameterType="Map"
            resultType="com.onnury.product.response.ReadyProductPageMainProductResponseDto">
        select
        p.product_id as productId,
        p.supplier_id as supplierId,
        b.brand_id as brandId,
        b.brand_title as brand,
        b.category1id as upCategoryId,
        b.up_category as upCategory,
        b.category2id as middleCategoryId,
        b.middle_category as middleCategory,
        b.category3id as downCategoryId,
        b.down_category as downCategory,
        p.product_name as productName,
        p.classification_code as classificationCode,
        p.model_number as modelNumber,
        p.delivery_type as deliveryType,
        p.sell_classification as sellClassification,
        p.expression_check as expressionCheck,
        p.normal_price as normalPrice,
        if(localtime() between p.event_start_date and p.event_end_date, p.event_price, p.sell_price) as sellPrice,
        p.delivery_price as deliveryPrice,
        p.purchase_price as purchasePrice,
        p.event_start_date as eventStartDate,
        p.event_end_date as eventEndDate,
        p.event_description as eventDescription,
        p.option_check as optionCheck,
        (select
        content
        from
        product_detail_info
        where
        product_id = p.product_id) as productDetailInfo,
        p.manufacturer as manufacturer,
        p.made_in_origin as madeInOrigin,
        p.consignment_store as consignmentStore,
        p.memo as memo,
        p.status as status
        from
        product p
        inner join
        (select
        cib.category_in_brand_id,
        cib.brand_id,
        (select brand_title from brand where brand_id = cib.brand_id) as brand_title,
        cib.category1id,
        (select category_name from category where category_id = cib.category1id) as up_category,
        cib.category2id,
        (select category_name from category where category_id = cib.category2id) as middle_category,
        cib.category3id,
        (select category_name from category where category_id = cib.category3id) as down_category
        from
        category_in_brand cib
        where
        cib.category1id = #{upCategoryId}
        <if test='brandIdList != null and !brandIdList.isEmpty()'>
            and cib.brand_id in
            <foreach collection="brandIdList" item="brandId" index="index" open="(" close=")" separator=",">
                #{brandId}
            </foreach>
        </if>
        <if test='searchBrandKeyword != null and searchBrandKeyword != ""'>
            and cib.brand_title like concat("%", #{searchBrandKeyword}, "%")
        </if>
        <if test='middleCategoryIdList != null and !middleCategoryIdList.isEmpty()'>
            and cib.category2id in
            <foreach collection="middleCategoryIdList" item="middleCategoryId" index="index" open="(" close=")"
                     separator=",">
                #{middleCategoryId}
            </foreach>
        </if>
        ) b
        on
        p.category_in_brand_id = b.category_in_brand_id
        where
        p.expression_check = "Y" and
        <if test='loginMemberType != null and loginMemberType != ""'>
            p.sell_classification = #{loginMemberType} and
        </if>
        p.status = "Y"
        <if test='labelIdList != null and !labelIdList.isEmpty()'>
            and p.product_id in
            (select
            product_id
            from
            label_of_product
            where
            label_id in
            <foreach collection="labelIdList" item="labelId" index="index" open="(" close=")" separator=",">
                #{labelId}
            </foreach>)
        </if>
        and (((localtime() between p.event_start_date and p.event_end_date) and p.event_price >= #{startRangePrice}
        <if test='endRangePrice > 0'>and #{endRangePrice} >= p.event_price</if>)
        or (p.sell_price >= #{startRangePrice} <if test='endRangePrice > 0'>and #{endRangePrice} >= p.sell_price</if>))
        group by
        p.product_id
        order by
        <if test="sort != 4">
            <choose>
                <when test="sort == 1">
                    p.created_at desc
                </when>
                <when test="sort == 2">
                    p.sell_price asc
                </when>
                <when test="sort == 3">
                    p.sell_price desc
                </when>
            </choose>
        </if>
        limit
        20
        offset
        #{page};
    </select>

    <!-- 각 대분류 제품이 가지고 있는 라벨 정보 -->
    <select id="getEachUpCategoryProductLabelInfo" parameterType="Long"
            resultType="com.onnury.label.response.LabelDataResponseDto">
        select label_id        as labelId,
               label_title     as labelTitle,
               color_code      as colorCode,
               start_post_date as startPostDate,
               end_post_date   as endPostDate,
               img_url         as imgUrl,
               top_expression  as topExpression
        from label
        where label_id in (select label_id from label_of_product where product_id = #{productId});
    </select>

    <!-- 각 대분류 제품이 가지고 있는 옵션 정보 -->
    <select id="getEachUpCategoryProductOptionInfo" parameterType="Long"
            resultType="com.onnury.product.response.ProductOptionCreateResponseDto">
        select po.product_option_id as productOptionId,
               po.option_title      as productOptionTitle,
               po.necessary_check   as necessaryCheck,
               null                 as productDetailOptionList
        from product_option po
        where po.product_option_id in
              (select poo.product_option_id
               from product_of_option poo
               where poo.product_id = #{productId});
    </select>

    <!-- 각 대분류 제품이 가지고 있는 옵션의 상세 옵션 정보 -->
    <select id="getEachUpCategoryProductDetailOptionInfo" parameterType="Long"
            resultType="com.onnury.product.response.ProductDetailOptionCreateResponseDto">
        select product_detail_option_id as detailOptionId,
               detail_option_name       as detailOptionName,
               option_price             as optionPrice
        from product_detail_option
        where product_option_id = #{productOptionId};
    </select>

    <!-- 각 대분류 제품이 가지고 있는 제품 이미지 정보 -->
    <select id="getEachUpCategoryProductMediaInfo" parameterType="Long"
            resultType="com.onnury.media.response.MediaResponseDto">
        select media_id        as mediaId,
               img_upload_url  as imgUploadUrl,
               img_url         as imgUrl,
               img_title       as imgTitle,
               img_uuid_title  as imgUuidTitle,
               represent_check as representCheck
        from media
        where type = "product"
          and mapping_content_id = #{productId};
    </select>

    <!-- 선택한 대분류 카테고리 + 검색 조건이 적용된 제품들 총 수량 조회 -->
    <select id="getSelectUpCategoryProductsCount" parameterType="Map" resultType="Integer">
        select
        count(*)
        from
        product p
        where
        p.expression_check = "Y" and
        <if test='loginMemberType != null and loginMemberType != ""'>
            p.sell_classification = #{loginMemberType} and
        </if>
        p.status = "Y"
        <if test='labelIdList != null and !labelIdList.isEmpty()'>
            and p.product_id in
            (select
            product_id
            from
            label_of_product
            where
            label_id in
            <foreach collection="labelIdList" item="labelId" index="index" open="(" close=")" separator=",">
                #{labelId}
            </foreach>)
        </if>
        and (((localtime() between p.event_start_date and p.event_end_date)and p.event_price >= #{startRangePrice}
        <if test='endRangePrice > 0'>and #{endRangePrice} >= p.event_price</if>)
        or (p.sell_price >= #{startRangePrice} <if test='endRangePrice > 0'>and #{endRangePrice} >= p.sell_price</if>))
        order by
        <if test="sort != 4">
            <choose>
                <when test="sort == 1">
                    p.created_at desc
                </when>
                <when test="sort == 2">
                    p.sell_price asc
                </when>
                <when test="sort == 3">
                    p.sell_price desc
                </when>
            </choose>
        </if>
    </select>

    <!-- 선택한 대분류 카테고리 제품들이 해당되는 브랜드 리스트 -->
    <select id="getSelectUpCategoryProductsRelatedBrand" parameterType="Map"
            resultType="com.onnury.brand.response.BrandDataResponseDto">
        select
        b.brand_id as brandId,
        b.brand_title as brandTitle,
        b.status as status,
        concat(b.brand_title, " - 이미지 호출 안함") as imgUrl
        from
        brand b
        inner join
        (select
        cib.brand_id
        from
        category_in_brand cib
        inner join
        (select cp.category_in_brand_id from
        (select
        p.category_in_brand_id
        from
        product p
        where
        p.expression_check = "Y" and
        <if test='loginMemberType != null and loginMemberType != ""'>p.sell_classification = #{loginMemberType} and
        </if>
        p.status = "Y"
        <if test='
        labelIdList != null and !labelIdList.isEmpty()'>and p.product_id in
            (select
            product_id
            from
            label_of_product
            where
            label_id in
            <foreach collection="
            labelIdList" item="labelId" index="index" open="(" close=")" separator=",">
                #{labelId}
            </foreach>)
        </if>
        and (((localtime() between p.event_start_date and p.event_end_date) and p.event_price >= #{startRangePrice}
        <if test='endRangePrice > 0'>
            and #{endRangePrice} >= p.event_price
        </if>)
        or (p.sell_price >= #{startRangePrice}
        <if test='endRangePrice > 0'>
            and #{endRangePrice} >= p.sell_price
        </if>))
        order by
        <if test="sort != 4">
            <choose>
                <when test="sort == 1">
                    p.created_at desc
                </when>
                <when test="sort == 2">
                    p.sell_price asc
                </when>
                <when test="sort == 3">
                    p.sell_price desc
                </when>
            </choose>
        </if>
        ) cp
        group by cp.category_in_brand_id) b
        on cib.category_in_brand_id = b.category_in_brand_id
        group by
        cib.brand_id) cib
    </select>

    <!-- 선택한 대분류 카테고리 제품들이 해당되는 중분류 카테고리 정보 리스트 -->
    <select id="getSelectUpCategoryProductsRelatedMiddleCategory" parameterType="Map"
            resultType="com.onnury.category.response.RelatedCategoryDataResponseDto">
        select
        c.category_id as categoryId,
        c.category_name as categoryName
        from
        category c
        inner join
        (select
        cib.category2id
        from
        category_in_brand cib
        inner join
        (select cp.category_in_brand_id from
        (select
        p.category_in_brand_id
        from
        product p
        where
        p.expression_check = "Y" and
        <if test='loginMemberType != null and loginMemberType != ""'>
            p.sell_classification = #{loginMemberType} and
        </if>
        p.status = "Y"
        <if test='labelIdList != null and !labelIdList.isEmpty()'>
            and p.product_id in
            (select
            product_id
            from
            label_of_product
            where
            label_id in
            <foreach collection="labelIdList" item="labelId" index="index" open="(" close=")" separator=",">
                #{labelId}
            </foreach>)
        </if>
        and (((localtime() between p.event_start_date and p.event_end_date) and p.event_price >= #{startRangePrice}
        <if test='endRangePrice > 0'>
            and #{endRangePrice} > = p.event_price
        </if>)
        or (p.sell_price >= #{startRangePrice}
        <if test='endRangePrice > 0'>
            and #{endRangePrice} >= p.sell_price
        </if>))
        order by
        <if test="sort != 4">
            <choose>
                <when test="sort == 1">
                    p.created_at desc
                </when>
                <when test="sort == 2">
                    p.sell_price asc
                </when>
                <when test="sort == 3">
                    p.sell_price desc
                </when>
            </choose>
        </if>
        ) cp
        group by cp.category_in_brand_id) b
        on cib.category_in_brand_id = b.category_in_brand_id
        group by
        cib.category2id) cib
        on
        c.category_id = cib.category2id
    </select>

    <!-- 선택한 대분류 카테고리 제품들의 연관된 라벨 리스트 정보-->
    <select id="getSelectUpCategoryProductsRelatedLabel" parameterType="Map"
            resultType="com.onnury.label.response.LabelResponseDto">
        select
        l.label_id as labelId,
        l.label_title as labelTitle
        from
        label l
        inner join
        (select
        lop.label_id
        from
        label_of_product lop
        inner join
        (select
        p.product_id
        from
        product p
        where
        p.expression_check = "Y" and
        <if test='loginMemberType != null and loginMemberType != ""'>
            p.sell_classification = #{loginMemberType} and
        </if>
        p.status = "Y"
        <if test='labelIdList != null and !labelIdList.isEmpty()'>
            and p.product_id in
            (select
            product_id
            from
            label_of_product
            where
            label_id in
            <foreach collection="labelIdList" item="labelId" index="index" open="(" close=")" separator=",">
                #{labelId}
            </foreach>)
        </if>
        and (((localtime() between p.event_start_date and p.event_end_date) and p.event_price >= #{startRangePrice}
        <if test='endRangePrice > 0'>
            and #{endRangePrice} >= p.event_price
        </if>)
        or (p.sell_price >= #{startRangePrice}
        <if test='endRangePrice > 0'>
            and #{endRangePrice} >= p.sell_price
        </if>))
        group by
        p.product_id
        order by
        <if test="sort != 4">
            <choose>
                <when test="sort == 1">
                    p.created_at desc
                </when>
                <when test="sort == 2">
                    p.sell_price asc
                </when>
                <when test="sort == 3">
                    p.sell_price desc
                </when>
            </choose>
        </if>
        ) b
        on lop.product_id = b.product_id
        group by
        lop.label_id) lop2
        on
        l.label_id = lop2.label_id
        where
        localtime() between l.start_post_date and l.end_post_date;
    </select>

    <!-- 중/소분류 제품 리스트 데이터 총 갯수 호출 -->
    <select id="middleAndDownCategoryPageMainProductsCount" parameterType="Map"
            resultType="Integer">
        select
            count(*)
        from
            product p
        where
            p.expression_check = 'Y' and
            p.status = 'Y'
            <if test="loginMemberType == 'C'">
                and p.sell_classification = 'C'
            </if>
            and p.category_in_brand_id in
            (select
            cib.category_in_brand_id
            from
            category_in_brand cib
            where
            if((select c.category_group from category c where c.category_id = #{categoryId}) = 1,
            cib.category2id = #{categoryId}
            <if test="!relatedDownCategoryIdList.isEmpty() and relatedDownCategoryIdList != null">and cib.category3id in
                <foreach collection="
                relatedDownCategoryIdList" item="relatedDownCategoryId" index="index" open=
                        "(" close=")" separator=",">
                    #{relatedDownCategoryId}
                </foreach>
            </if>,
                        cib.category3id = #{categoryId})
                    <if test="!brandIdList.isEmpty() or searchKeyword != ''">
                        <choose>
                            <when test="!brandIdList.isEmpty() and searchKeyword != ''">
                                and cib.brand_id in
                                    (select b.brand_id from brand b where b.brand_id in
                                    <foreach collection="brandIdList" item="brandId" index="index" open="(" close=")" separator=",">
                                        #{brandId}
                                    </foreach>
                                    and b.brand_title like concat("%", #{searchKeyword},"%"))
                            </when>
                            <when test="!brandIdList.isEmpty() and searchKeyword == ''">
                                and cib.brand_id in
                                (select b.brand_id from brand b where b.brand_id in
                                <foreach collection="brandIdList" item="brandId" index="index" open="(" close=")" separator=",">
                                    #{brandId}
                                </foreach>)
                            </when>
                            <when test="brandIdList.isEmpty() and searchKeyword != ''">
                                and cib.brand_id in
                                (select b.brand_id from brand b where b.brand_title like concat("%", #{searchKeyword},"%"))
                            </when>
                        </choose>
                    </if>)
            and (((localtime() between p.event_start_date and p.event_end_date) and p.event_price >= #{startRangePrice}
            <if test='endRangePrice > 0'>
                and #{endRangePrice} >= p.event_price
            </if>)
            or (p.sell_price >= #{startRangePrice}
            <if test='endRangePrice > 0'>
                and #{endRangePrice} >= p.sell_price
            </if>))
            <if test="!labelIdList.isEmpty() and labelIdList != null">
                and p.product_id in
                    (select lop.product_id from label_of_product lop where lop.label_id in
                    <foreach collection="labelIdList" item="labelId" index="index" open="(" close=")" separator=",">
                        #{labelId}
                    </foreach>)
            </if>
        order by
            <if test="sort != 4">
                <choose>
                    <when test="sort == 1">
                        p.created_at desc
                    </when>
                    <when test="sort == 2">
                        p.sell_price asc
                    </when>
                    <when test="sort == 3">
                        p.sell_price desc
                    </when>
                </choose>
            </if>
    </select>

    <!-- 중/소분류 제품 리스트 데이터 1차 호출 -->
    <select id="middleAndDownCategoryPageMainProducts" parameterType="Map"
            resultType="com.onnury.product.response.ReadyProductPageMainProductResponseDtoV2">
        select
            p.product_id as productId,
            p.supplier_id as supplierId,
            b.brand_id as brandId,
            b.brand_title as brand,
            b.category_in_brand_id as categoryInBrandId,
            b.category1id as upCategoryId,
            b.up_category as upCategory,
            b.category2id as middleCategoryId,
            b.middle_category as middleCategory,
            b.category3id as downCategoryId,
            b.down_category as downCategory,
            p.product_name as productName,
            p.classification_code as classificationCode,
            p.model_number as modelNumber,
            p.delivery_type as deliveryType,
            p.sell_classification as sellClassification,
            p.expression_check as expressionCheck,
            p.normal_price as normalPrice,
            if(localtime() between p.event_start_date and p.event_end_date, p.event_price, p.sell_price) as sellPrice,
            p.delivery_price as deliveryPrice,
            p.purchase_price as purchasePrice,
            p.event_start_date as eventStartDate,
            p.event_end_date as eventEndDate,
            p.event_description as eventDescription,
            p.option_check as optionCheck,
            (select content from product_detail_info where product_id = p.product_id) as productDetailInfo,
            p.manufacturer as manufacturer,
            p.made_in_origin as madeInOrigin,
            p.consignment_store as consignmentStore,
            p.memo as memo,
            p.status as status
        from
            product p
                inner join
            (select
                cib.category_in_brand_id,
                cib.brand_id,
                (select brand_title from brand where brand_id = cib.brand_id) as brand_title,
                cib.category1id,
                (select category_name from category where category_id = cib.category1id) as up_category,
                cib.category2id,
                (select category_name from category where category_id = cib.category2id) as middle_category,
                cib.category3id,
                (select category_name from category where category_id = cib.category3id) as down_category
            from
                category_in_brand cib) b
                on
            p.category_in_brand_id = b.category_in_brand_id
        where
            p.expression_check = 'Y' and
            p.status = 'Y'
            <if test="loginMemberType == 'C'">
                and p.sell_classification = 'C'
            </if>
            and p.category_in_brand_id in
            (select
            cib.category_in_brand_id
            from
            category_in_brand cib
            where
            if((select c.category_group from category c where c.category_id = #{categoryId}) = 1,
            cib.category2id = #{categoryId}
            <if test="!relatedDownCategoryIdList.isEmpty() and relatedDownCategoryIdList != null">and cib.category3id in
                <foreach collection="
                    relatedDownCategoryIdList" item="relatedDownCategoryId" index="index" open=
                        "(" close=")" separator=",">
                    #{relatedDownCategoryId}
                </foreach>
            </if>,
            cib.category3id = #{categoryId})
            <if test="!brandIdList.isEmpty() or searchKeyword != ''">
                <choose>
                    <when test="!brandIdList.isEmpty() and searchKeyword != ''">
                        and cib.brand_id in
                        (select b.brand_id from brand b where b.brand_id in
                        <foreach collection="brandIdList" item="brandId" index="index" open="(" close=")" separator=",">
                            #{brandId}
                        </foreach>
                        and b.brand_title like concat("%", #{searchKeyword},"%"))
                    </when>
                    <when test="!brandIdList.isEmpty() and searchKeyword == ''">
                        and cib.brand_id in
                        (select b.brand_id from brand b where b.brand_id in
                        <foreach collection="brandIdList" item="brandId" index="index" open="(" close=")" separator=",">
                            #{brandId}
                        </foreach>)
                    </when>
                    <when test="brandIdList.isEmpty() and searchKeyword != ''">
                        and cib.brand_id in
                        (select b.brand_id from brand b where b.brand_title like concat("%", #{searchKeyword},"%"))
                    </when>
                </choose>
            </if>)
            and (((localtime() between p.event_start_date and p.event_end_date) and p.event_price >= #{startRangePrice}
            <if test='endRangePrice > 0'>
                and #{endRangePrice} >= p.event_price
            </if>)
            or (p.sell_price >= #{startRangePrice}
            <if test='endRangePrice > 0'>
                and #{endRangePrice} >= p.sell_price
            </if>))
            <if test="!labelIdList.isEmpty() and labelIdList != null">
                and p.product_id in
                (select lop.product_id from label_of_product lop where lop.label_id in
                <foreach collection="labelIdList" item="labelId" index="index" open="(" close=")" separator=",">
                    #{labelId}
                </foreach>)
            </if>
        order by
            <if test="sort != 4">
                <choose>
                    <when test="sort == 1">
                        p.created_at desc
                    </when>
                    <when test="sort == 2">
                        p.sell_price asc
                    </when>
                    <when test="sort == 3">
                        p.sell_price desc
                    </when>
                </choose>
            </if>
        limit 20
        offset #{page};
    </select>

</mapper>